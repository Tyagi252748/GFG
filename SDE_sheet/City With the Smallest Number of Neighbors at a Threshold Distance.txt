class Solution {
  public:
    int findCity(int n, int m, vector<vector<int>>& edges, int distanceThreshold) {
                     
        vector<vector<int>> dist(n, vector<int>(n, INT_MAX));
        for(int i = 0; i < n; i++)dist[i][i] = 0;
        
        for(auto it : edges){
            int i = it[0];
            int j = it[1];
            dist[i][j] = it[2];
            dist[j][i] = it[2];
        }
        
        for(int k = 0; k < n; k++){
            for(int i = 0; i < n; i++){
                for(int j = 0; j < n; j++){
                    if(dist[i][k] == INT_MAX || dist[k][j] == INT_MAX)continue;
                    
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                }
            }
        }
        
        int mincnt = n;
        int anscity = 0;
        for(int city = 0; city < n; city++){
            int cnt = 0;
            for(int nghbr = 0; nghbr < n; nghbr++){
                if(dist[city][nghbr] <= distanceThreshold)cnt++;
            }
            if(cnt <= mincnt){
                mincnt = cnt;
                anscity = city;
            }
        }
        
        return anscity;             
    }
};