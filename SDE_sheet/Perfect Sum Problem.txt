class Solution{

	public:
	int solve(int idx, int arr[], int target, vector<vector<int>> &dp){
        if(idx == 0){
	        if(target == 0 && arr[0] == 0)return 2;
	        if(target == 0 || target == arr[0]) return 1;
	        return 0;
        }
	    if(dp[idx][target] != -1)return dp[idx][target];
	    
	    int notTaken = solve(idx - 1, arr, target, dp);
	    int taken = 0;
	    if(arr[idx] <= target){
	        taken = solve(idx - 1, arr, target - arr[idx], dp);
	    }
	    return dp[idx][target] = (taken + notTaken)%1000000007;
	}
	int perfectSum(int arr[], int n, int sum)
	{
        vector<vector<int>>dp(n, vector<int>(sum + 1, -1));
        return solve(n - 1, arr, sum, dp)%1000000007;
        
	}
};




									OR WITH TABULATION

class Solution{

	public:
	int perfectSum(int arr[], int n, int sum)
	{
        
        vector<vector<int>>dp(n, vector<int>(sum + 1, 0));
        if(arr[0] == 0)dp[0][0] = 2;
        else dp[0][0] = 1;
        if(arr[0] != 0 && arr[0] <= sum)dp[0][arr[0]] = 1;
        
        for(int i = 1; i < n; i++){
            for(int s = 0; s <= sum; s++){
                int notTake = dp[i - 1][s];
                int take = 0;
                if(arr[i] <= s)take = dp[i - 1][s - arr[i]];
                
                dp[i][s] = (take + notTake)%1000000007;
            }
        }
        return dp[n - 1][sum]%10000000007;
	}
};