class Solution
{
    public:
    //Function to return the minimum cost to react at bottom
	//right cell from top left cell.
    int minimumCostPath(vector<vector<int>>& grid) 
    {
        int n = grid.size();
        vector<vector<int>> dist(n, vector<int>(n, 1e9));
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, 
                           greater<pair<int, pair<int, int>>>> pq;
        pq.push({grid[0][0], {0, 0}});
        dist[0][0] = grid[0][0];
        int newr[] = {0, 0, 1, -1};
        int newc[] = {-1, 1, 0, 0};
        while(!pq.empty()){
            int dis = pq.top().first;
            int r = pq.top().second.first;
            int c = pq.top().second.second;
            pq.pop();
            for(int i = 0; i < 4; i++){
                int nr = r + newr[i];
                int nc = c + newc[i];
                if(nr >= 0 && nr < n && nc >= 0 && nc < n){
                    if(dis + grid[nr][nc] < dist[nr][nc]){
                        dist[nr][nc] = dis + grid[nr][nc];
                        pq.push({dis + grid[nr][nc],{nr, nc}});
                    }
                }
            }
            
        }
        return dist[n - 1][n - 1];
    }
}