class Solution {
  public:
    int solve(int idx, vector<int> &dp, vector<int> &height){
        if(idx == 0){
            return 0;
        }
        if(dp[idx] != -1)return dp[idx];
        int left = solve(idx - 1, dp, height) + abs(height[idx] - height[idx - 1]);
        int right = INT_MAX;
        if(idx > 1){
         right = solve(idx - 2, dp, height) + abs(height[idx] - height[idx - 2]);
        }
        
        return dp[idx] = min(left, right);
    }
    int minimumEnergy(vector<int>& height, int n) {
        vector<int> dp(n + 1, -1);
        return solve(n - 1, dp, height);
    }
};

                         OR

class Solution {
  public:
    int minimumEnergy(vector<int>& height, int n) {
        vector<int> dp(n, -1);
        dp[0] = 0;
        for(int i = 1; i < n; i++){
            int fs = dp[i - 1] + abs(height[i] - height[i - 1]);
            int ss = INT_MAX;
            if(i > 1){
                ss= dp[i - 2] + abs(height[i] - height[i - 2]);
            }
            dp[i] = min(fs, ss);
        }
        return dp[n - 1];
    }
};

                    OR
class Solution {
  public:
    int minimumEnergy(vector<int>& height, int n) {
        int prev = 0;
        int prev2 = 0;
        for(int i = 1; i < n; i++){
            int fs = prev + abs(height[i] - height[i - 1]);
            int ss = INT_MAX;
            if(i > 1){
                ss= prev2 + abs(height[i] - height[i - 2]);
            }
            int curi= min(fs, ss);
            prev2 = prev;
            prev = curi;
        }
        return prev;
    }
};