class Solution
{
  public:
    //Function to find maximum of each subarray of size k.
    vector <int> max_of_subarrays(int *arr, int n, int k)
    {
        vector<int> ans;
        deque <int> dq(k);
        for(int i = 0; i < k; i++){
            while(!dq.empty() && arr[i] >= arr[dq.back()]){
                dq.pop_back();
            }
            dq.push_back(i);
        }
        for(int i = k; i < n; i++){
            ans.push_back(arr[dq.front()]);
            while(dq.size() > 0 && i - dq.front() >= k){
                dq.pop_front();
            }
            while(dq.size() > 0 && arr[i] > arr[dq.back()]){
                dq.pop_back();
            }    
            dq.push_back(i);
        }
        ans.push_back(arr[dq.front()]);
        return ans;
    }
};


                                            OR TWO POINTER APPROACH


class Solution
{
  public:
    //Function to find maximum of each subarray of size k.
    vector <int> max_of_subarrays(int *arr, int n, int k)
    {
        vector<int> ans;
        vector<int> list;
        int j = 0;
        for(int i = 0; i < n; i++){
            while(list.size() > 0 && arr[i] > list.back())list.pop_back();
            list.push_back(arr[i]);
            
            if(i - j + 1 == k){
                ans.push_back(list.front());
                if(arr[j] == list.front()){
                    list.erase(list.begin());
                }
                j++;
            }
        }
        return ans;
    }
};