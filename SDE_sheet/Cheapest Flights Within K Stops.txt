class Solution {
  public:
    int CheapestFLight(int n, vector<vector<int>>& flights, int src, int dst, int K)  {
        vector<pair<int, int>> adj[n];
        for(auto i : flights){
            adj[i[0]].push_back({i[1], i[2]});
        }
        vector<int> dist(n, 1e9);
        queue<pair<int, pair<int, int>>> q;
        q.push({0, {src, 0}});
        dist[src] = 0;
        while(!q.empty()){
            auto i = q.front();
            int stops = i.first;
            int node = i.second.first;
            int dis = i.second.second;
            q.pop();
            if(stops > K)continue;
            
            for(auto it :adj[node]){
                int adjnode = it.first;
                int cost = it.second;
            
            if(cost + dis < dist[adjnode] && stops <= K){
                dist[adjnode] = cost + dis;
                q.push({stops + 1, {adjnode, cost + dis}});
            }
            }
        }
        if(dist[dst] == 1e9)return -1;
        return dist[dst];
    }
};