class Solution{
    public:
        //Function to merge the arrays.
        void merge(long long arr1[], long long arr2[], int n, int m) 
        { 
            int gap = ceil((float)(n + m)/2);
            while(gap > 0){
                int i = 0;
                int j = gap;
                while(j < (n + m)){
                    if(j < n && arr1[i] > arr1[j]){
                        swap(arr1[i], arr1[j]);
                    }else if(j >= n && i < n && arr1[i] > arr2[j - n]){
                        swap(arr1[i], arr2[j - n]);
                    }else if(i >= n && j >= n && arr2[i - n] > arr2[j - n]){
                        swap(arr2[i - n], arr2[j - n]);
                    }
                    i++;
                    j++;
                }
                if(gap == 1){
                    gap = 0;
                }else{
                    gap = ceil((float)gap/2);
                    }
            }
        } 
};



                                       OR


class Solution{
    public:
        //Function to merge the arrays.
        void merge(long long arr1[], long long arr2[], int n, int m) 
        { 
            int i = n - 1;
            int j = 0;
            while(i >= 0 && j < m){
                if(arr1[i] > arr2[j]){
                    swap(arr1[i], arr2[j]);
                }
                i--;
                j++;
            }
            sort(arr1, arr1 + n);
            sort(arr2, arr2 + m);
        }
};