 public:
    int MinimumEffort(vector<vector<int>>& heights) {
        int n = heights.size();
        int m = heights[0].size();
        vector<vector<int>>eff(n , vector<int>(m, 1e9));
        eff[0][0] = 0;
        priority_queue<pair<int, pair<int, int>>,
                     vector<pair<int, pair<int, int>>>, 
                     greater<pair<int, pair<int, int>>>> pq;
        pq.push({0, {0, 0}});
        int nr[] = {1, -1, 0, 0};
        int nc[] = {0, 0, -1, 1};
        while(!pq.empty()){
            auto it = pq.top();
            int diff = it.first;
            int r = it.second.first;
            int c = it.second.second;
            pq.pop();
            
            if(r == n - 1 && c == m - 1)return diff;
            for(int i = 0; i < 4; i++){
                int newr = r + nr[i];
                int newc = c + nc[i];
                if(newr >= 0 && newr < n && newc >= 0 && newc < m){
                    int neweffert = max(diff, abs(heights[newr][newc] - heights[r][c]));
                    if(neweffert < eff[newr][newc]){
                        eff[newr][newc] = neweffert;
                        pq.push({neweffert, {newr, newc}});
                    }
                }
            }
        }
        return 0;
    }
};