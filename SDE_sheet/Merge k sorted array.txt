class Solution
{
    public:
    
    class node{
        public:
        int data;
        int row;
        int clm;
        node(int data, int row, int clm){
        this->data = data;
        this->row = row;
        this->clm = clm;
        }
    };
    class compare{
        public:
        
        
        bool operator()(node *a, node *b){
            return a->data > b->data;
        }
    };
    //Function to merge k sorted arrays.
    vector<int> mergeKArrays(vector<vector<int>> arr, int K)
    {
        priority_queue<node*, vector<node*>,compare>  minheap;
        
        vector<int> ans;
        for(int i = 0; i < K;i++){
            node* temp = new node(arr[i][0], i , 0);
            minheap.push(temp);
        }
    
    while(minheap.size() > 0){
        node * temp = minheap.top();
        ans.push_back(temp->data);
        minheap.pop();
        int i = temp->row;
        int j = temp->clm;
        
        if(j + 1 < arr.size()){
            node * next = new node(arr[i][j+1] , i , j+1);
            minheap.push(next);
        }
    }
        
        return ans;
    }
    
};