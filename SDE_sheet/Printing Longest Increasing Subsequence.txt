class Solution {
  public:
    vector<int> longestIncreasingSubsequence(int n, vector<int>& arr) {
        vector<int> dp(n, 1), hash(n);
        int maxi = 1;
        int last_idx = 0;
        for(int i = 0; i < n; i++){
            hash[i] = i;
            for(int pre = 0; pre < i; pre++){
                if(arr[pre] < arr[i] && 1 + dp[pre] > dp[i]){
                    dp[i] = 1 + dp[pre];
                    hash[i] = pre;
                }
            }
            if(dp[i] > maxi){
                maxi = dp[i];
                last_idx = i;
            }
        }
        vector<int> ans;
        ans.push_back(arr[last_idx]);
        while(hash[last_idx] != last_idx){
            last_idx = hash[last_idx];
            ans.push_back(arr[last_idx]);
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }
};