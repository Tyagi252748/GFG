class Solution
{
private:
    Node* markParent(Node*root,map<Node*,Node*> &parent_track,int target){
        queue<Node*> q;
        q.push(root);
        Node*res;
        while(!q.empty()){
            Node*curr = q.front();
            if(curr->data == target){
                res = curr;
            }
            q.pop();
            if(curr->left){
                parent_track[curr->left] = curr;
                q.push(curr->left);
            }
            if(curr->right){
                parent_track[curr->right] = curr;
                q.push(curr->right);
            }
        }
        return res;
    }
    vector<int> distanceK(Node* root, Node* start, int k,map<Node*,Node*> &parent_track) {
        map<Node*,bool> visited;
        queue<Node*> q;
        q.push(start);
        visited[start] = true;
        int curr_level = 0;
        while(!q.empty()){
            int size = q.size();
            if(curr_level++ == k) break;
            for(int i = 0; i < size; i++){
                Node* curr = q.front();
                q.pop();
              if(curr->left && !visited[curr->left]){
                  q.push(curr->left);
                  visited[curr->left] = true;
              } 
            if(curr->right && !visited[curr->right]){
                  q.push(curr->right);
                  visited[curr->right] = true;
              }
            if(parent_track[curr] && !visited[parent_track[curr]]){
                q.push(parent_track[curr]);
                visited[parent_track[curr]] = true;
            }     
            }
        }
        vector<int> ans;
        while(!q.empty()){
            Node* current = q.front();
            q.pop();
            ans.push_back(current->data);
        }
        return ans;
    }

public:

    vector <int> KDistanceNodes(Node* root, int target , int k)
    {
        map<Node*,Node*>parent_track;
        Node* start = markParent(root,parent_track,target);
        vector<int> res = distanceK(root,start,k,parent_track);
        sort(res.begin(),res.end());
        return res;
    }
};