class Solution {
  public:
    int shortestPath(vector<vector<int>> &grid, pair<int, int> source,
                     pair<int, int> destination) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>>dist(n, vector<int>(m, 1e9));
        queue<pair<int, pair<int, int>>>q;
        dist[source.first][source.second] = 0;
        q.push({0, {source.first, source.second}});
        if(source.first == destination.first && source.second == destination.second)return 0;
        int nr[] = {-1, 1, 0, 0};
        int nc[] = {0, 0, -1, 1};
        while(!q.empty()){
            auto it = q.front();
            int dis = it.first;
            int r = it.second.first;
            int c = it.second.second;
            q.pop();
            for(int i = 0; i < 4; i++){
                int newr = r + nr[i];
                int newc = c + nc[i];
                if(newr >= 0 && newr < n && newc >= 0 && newc < m && grid[newr][newc] == 1
                   && dis + 1 < dist[newr][newc]){
                    dist[newr][newc] = dis + 1;
                    if(newr == destination.first && newc == destination.second){
                        return dis + 1;
                    }
                    q.push({dis + 1, {newr, newc}});
                }
            }
        }
        return -1;
    }
};