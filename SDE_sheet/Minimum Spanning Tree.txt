class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        priority_queue<pair<int, int>, vector<pair<int, int>>,greater<pair<int, int>>>pq;
        vector<int> vis(V, 0);
        pq.push({0, 0});
        
        int sum = 0;
        while(!pq.empty()){
            int node = pq.top().second;
            int wt = pq.top().first;
            pq.pop();
            if(vis[node] == 1)continue;
            vis[node] = 1;
            sum += wt;
            for(auto it : adj[node]){
                int adjnode = it[0];
                int adjwt = it[1];
                if(!vis[adjnode]){
                    pq.push({adjwt, adjnode});
                }
            }
        }
        return sum;
    }
};

                                                  USING DISJOINT SETS DATA STRUCTURE

class DisjointSet{
    vector<int> parent, rank;
    public:
    DisjointSet(int n){
        rank.resize(n + 1, 0);
        parent.resize(n+1,0);
    
        for(int i = 0 ; i < n; i++){
            parent[i] = i;
        }
    }
    int findParent(int node){
        if(parent[node] == node)
        return node;
        else{
            return parent[node] = findParent(parent[node]);
        }
    }
    void UnionByRank(int u, int v){
        int par_u = findParent(u);
        int par_v = findParent(v);
        if(par_u == par_v)return;
        if(rank[par_u] < rank[par_v]){
            parent[par_u] = par_v;
        }else if(rank[par_v] < rank[par_u]){
            parent[par_v] = par_u;
        }else{
            parent[par_v] = par_u;
            rank[par_u]++;
        }
    }
};
class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        vector<pair<int, pair<int, int>>>edges;
        for(int i = 0; i < V; i++){
            for(auto it : adj[i]){
                int node = i;
                int adjnode = it[0];
                int wt = it[1];
                edges.push_back({wt, {node, adjnode}});
                
            }
        }
        DisjointSet ds(V);
        sort(edges.begin(), edges.end());
        int ans = 0;
        for(auto it : edges){
            int u = it.second.first;
            int v = it.second.second;
            int wt = it.first;
            if(ds.findParent(u) != ds.findParent(v)){
                ds.UnionByRank(u, v);
                ans += wt;
            }
        }
        return ans;
        
    }
};