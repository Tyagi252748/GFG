class Solution {
  public:
    bool dfs(int node, vector<int> &vis, vector<int> &dfsvis, vector<int> &check, vector<int> adj[]){
        vis[node] = 1;
        dfsvis[node] = 1;
        check[node] = 0;
        for(auto it : adj[node]){
            if(!vis[it]){
                if(dfs(it, vis, dfsvis, check, adj)){
                    check[it] = 0;
                    return true;
                }
            }else if(dfsvis[it]){
                check[node] = 0;
                return true;
            }
        }
        check[node] = 1;
        dfsvis[node] = 0;
        return false;
    }
    vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        vector<int> safe;
        vector<int> vis(V, 0);
        vector<int> dfsvis(V, 0);
        vector<int> check(V, 0);
        for(int i = 0; i < V; i++){
            if(!vis[i]){
                dfs(i, vis,dfsvis, check, adj);
            }
        }
        for(int i = 0; i < V; i++){
            if(check[i] == 1){
                safe.push_back(i);
            }
        }
        return safe;
    }
};