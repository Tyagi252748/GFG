class Node{
    public:
    int data;
    Node *left;
    Node *right;
    
    Node(int data){
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};
class cmp{
    public:
    bool operator()(Node*a, Node*b){
        return a->data > b->data;
    }
};
class Solution
{
	public:
	void preorder_traversal(Node* root,vector<string> &ans, string temp ){
	    if(root->left == NULL && root->right == NULL){
	        ans.push_back(temp);
	        return;
	    }
	    preorder_traversal(root->left, ans, temp + '0');
	    preorder_traversal(root->right, ans, temp + '1');
	}
		vector<string> huffmanCodes(string S,vector<int> f,int N)
		{
		    priority_queue<Node*, vector<Node*>, cmp> minheap;
		    for(int i = 0; i < N;i++){
		        Node* temp = new Node(f[i]);
		        minheap.push(temp);
		    }
		    while(minheap.size() > 1){
		        Node* left = minheap.top();
		        minheap.pop();
		        
		        Node* right = minheap.top();
		        minheap.pop();
		        
		        Node*temp = new Node(left->data + right->data);
		        temp->left = left;
		        temp->right = right;
		        minheap.push(temp);
		        
		    }
		    Node* root = minheap.top();
		    vector<string> ans;
		    string temp = "";
		    preorder_traversal(root, ans, temp);
		    return ans;
		    
		}
};