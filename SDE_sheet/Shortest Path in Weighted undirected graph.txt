class Solution {
  public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        vector<pair<int, int>> adj[n + 1];
        for(auto i : edges){
            adj[i[0]].push_back({i[1], i[2]});
            adj[i[1]].push_back({i[0], i[2]});
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        vector<int> dist(n + 1, 1e9);
        vector<int>parent(n + 1);
        for(int i = 1 ;i <= n;i++){
            parent[i] = i;
        }
        dist[1] = 0;
        pq.push({0, 1});
        while(!pq.empty()){
            int node = pq.top().second;
            int dis = pq.top().first;
            pq.pop();
            for(auto i : adj[node]){
                int adjnode = i.first;
                int adjwt = i.second;
                if(dis + adjwt < dist[adjnode]){
                     dist[adjnode] = dis + adjwt;
                     pq.push({dis + adjwt, adjnode});
                     parent[adjnode] = node;
                }
            }
        }
        if(dist[n] == 1e9)return {-1};
        vector<int> path;
        int node = n;
        while(parent[node] != node){
            path.push_back(node);
            node = parent[node];
        }
        path.push_back(1);
        
        reverse(path.begin(), path.end());
        return path;
    }
};