class Solution{
    public:
    int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
        int gap = ceil((float)(n + m)/2);
        while(gap > 0){
            int i = 0;
            int j = gap;
            while(j < (n + m)){
                if(j < n && arr1[i] > arr1[j]){
                    swap(arr1[i], arr1[j]);
                }else if(j >= n && i < n && arr1[i] > arr2[j - n]){
                    swap(arr1[i], arr2[j - n]);
                }else if(i >= n && j >= n && arr2[i - n] > arr2[j - n]){
                    swap(arr2[i - n], arr2[j - n]);
                }
                i++;
                j++;
            }
            if(gap == 1){
                gap = 0;
            }else{
                gap = ceil((float)gap/2);
                }
        }

        if(k - 1 < n)return arr1[k - 1];
        return arr2[k - n - 1];
    }
};


                                          OR WITH BETTER COMPLEXITY

class Solution{
    public:
    int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
        if(m < n) return kthElement(arr2, arr1, m, n, k);
        
        int low = max(0, k - m);
        int high = min(k, n);
        while(low <= high){
            int cut1 = (low + high) >> 1;
            int cut2 = k - cut1;
            
            int left1 = cut1 == 0 ? INT_MIN : arr1[cut1 - 1];
            int left2 = cut2 == 0 ? INT_MIN : arr2[cut2 - 1];
            
            int right1 = cut1 == n ? INT_MAX : arr1[cut1];
            int right2 = cut2 == m ? INT_MAX : arr2[cut2];
            
            if(left1 <= right2 && left2 <= right1){
                return max(left1, left2);
            }else if(left1 > right2){
                high = cut1 - 1;
            }else{
                low = cut1 + 1;
            }
        }
    }
};