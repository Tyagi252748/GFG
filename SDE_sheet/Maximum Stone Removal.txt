class DisjointSet{
    vector<int> parent, size;
    public:
    DisjointSet(int n){
        parent.resize(n + 1);
        size.resize(n + 1, 1);
        for(int i = 0; i <= n; i++){
            parent[i] = i;
        }
    }
    int findPar(int node){
        if(parent[node] == node)return node;
    
        return parent[node] = findPar(parent[node]);

    }
    void unionbySize(int u, int v){
        int par_u = findPar(u);
        int par_v = findPar(v);
        if(par_u == par_v)return;
        if(size[par_u] < size[par_v]){
            parent[par_u] = par_v;
            size[par_v] += size[par_u];
        }else{
            parent[par_v] = par_u;
            size[par_u] += size[par_v];            
        }
    }
};
class Solution {
  public:
    int maxRemove(vector<vector<int>>& stones, int n) {
        int maxrow = 0;
        int maxclm = 0;
        for(auto it : stones){
            maxrow = max(maxrow, it[0]);
            maxclm = max(maxclm, it[1]);
        }
        DisjointSet ds(maxrow + maxclm + 1);
        unordered_map<int, int> mp;
        for(auto it : stones){
            int r = it[0];
            int c = maxrow + it[1] + 1;
            ds.unionbySize(r, c);
            mp[r] = 1;
            mp[c] = 1;
        }
        int cnt = 0;
        for(auto it : mp){
            if(ds.findPar(it.first) == it.first)cnt++;
        }
        
        return n - cnt;
    }
};