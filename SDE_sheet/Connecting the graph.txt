class DisjointSet{
    vector<int> parent, rank;
    public:
    DisjointSet(int n){
        rank.resize(n + 1, 0);
        parent.resize(n+1,0);
    
        for(int i = 0 ; i < n; i++){
            parent[i] = i;
        }
    }
    int findParent(int node){
        if(parent[node] == node)
        return node;
        else{
            return parent[node] = findParent(parent[node]);
        }
    }
    void UnionByRank(int u, int v){
        int par_u = findParent(u);
        int par_v = findParent(v);
        if(par_u == par_v)return;
        if(rank[par_u] < rank[par_v]){
            parent[par_u] = par_v;
        }else if(rank[par_v] < rank[par_u]){
            parent[par_v] = par_u;
        }else{
            parent[par_v] = par_u;
            rank[par_u]++;
        }
    }
};
class Solution {
  public:
    int Solve(int n, vector<vector<int>>& edge) {
        DisjointSet ds(n);
        int extraedges = 0;
        for(auto it: edge){
            int u = it[0];
            int v = it[1];
            
            if(ds.findParent(u) == ds.findParent(v)){
                extraedges++;
            }else{
                ds.UnionByRank(u, v);
            }
        }
        int comp = 0;
        for(int i = 0 ;i < n; i++){
            if(ds.findParent(i) == i){
                comp++;
            }
        }
        if(extraedges >= comp - 1){
            return comp - 1;
        }
        return -1;
    }
};