class Solution 
{
    public:
    //Function to find distance of nearest 1 in the grid for each cell.
	vector<vector<int>>nearest(vector<vector<int>>grid)
	{
	    	    int n = grid.size();
	    int m = grid[0].size();
	    vector<vector<int>>dist(n, vector<int>(m, 0));
	    vector<vector<int>> vis(n, vector<int>(m, 0));
	    queue<pair<int, pair<int, int>>>q;
	    for(int i = 0; i < n; i++){
	        for(int j = 0; j < m; j++){
	            if(grid[i][j] == 1){
	                q.push({0, {i ,j}});
	                vis[i][j] = 1;
	            }
	        }
	    }
	    int delr[4] = {-1, 1, 0, 0};
	    int delc[4] = {0, 0, 1, -1};
	    while(!q.empty()){
	        int dis = q.front().first;
	        int r = q.front().second.first;
	        int c = q.front().second.second;
	        q.pop();
	        dist[r][c] = dis;
	        
	        for(int i = 0; i < 4; i++){
	            int nr = r + delr[i];
	            int nc = c + delc[i];
	            if(nr >= 0 && nr < n && nc >= 0 && nc < m && vis[nr][nc] == 0){
	                vis[nr][nc] = 1;
	                q.push({dis + 1, {nr, nc}});
	            }
	        }
	    }
	    return dist;
	}
};