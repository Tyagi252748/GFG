class Solution {
public:
	int minStepToReachTarget(vector<int>&KnightPos, vector<int>&TargetPos, int N){
	    if(KnightPos[0] == TargetPos[0] && KnightPos[1] == TargetPos[1])return 0;
	    queue<pair<int, int>> q;
	    vector<vector<int>> vis(N + 1, vector<int>(N + 1, 0));
	    q.push( {KnightPos[0], KnightPos[1]} );
	    vis[KnightPos[0]][KnightPos[1]] = 1;
	    int delr[8] = {-2, -2, -1, -1, 1, 1, 2, 2};
	    int delc[8] = {-1, 1, -2, 2, -2, 2, -1, 1};
	    int step = 1;
	    while(!q.empty()){
	        int size = q.size();
	        while(size--){
	            int r = q.front().first;
	            int c = q.front().second;
	            q.pop();
	            for(int i = 0; i < 8; i++){
	                int nr = r + delr[i];
	                int nc = c + delc[i];
	                if(nr >= 1 && nr <= N && nc >= 1 && nc <= N && !vis[nr][nc]){
	                    if(nr == TargetPos[0] && nc == TargetPos[1])return step;
	                    q.push({nr, nc});
	                    vis[nr][nc] = 1;
	                }
	            }
	        }
	        step++;
	    }
	    return -1;
	}
};