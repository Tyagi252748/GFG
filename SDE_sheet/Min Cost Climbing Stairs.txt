int solve(vector<int> &cost, int n,vector<int>&dp){
    if(n == 0){
        return cost[0];
    }
    if(n == 1){
        return cost[1];
    }
    if(dp[n] != -1){
        return dp[n];
    }
    
    dp[n] = cost[n] + min(solve(cost,n-1,dp), solve(cost,n-2,dp));
    return dp[n];
    
}
class Solution {
  public:
    int minCostClimbingStairs(vector<int>&cost ,int N) {
        vector<int> dp(N + 1, -1);
        int ans = min(solve(cost, N - 1,dp), solve(cost, N - 2,dp));
        return ans;
    }
};



                         OR

  public:
    int minCostClimbingStairs(vector<int>&cost ,int N) {
        vector<int> dp(N);
        dp[0] = cost[0];
        dp[1] = cost[1];
        for(int i = 2; i < N;i++){
            dp[i] = cost[i] + min(dp[i-1], dp[i-2]);
        }
        return(min(dp[N-1], dp[N-2]));
    }
};