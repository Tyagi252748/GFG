class Solution {
  public:
    int countPaths(int n, vector<vector<int>>& roads) {
        vector<pair<int, int>>adj[n];
        for(auto it : roads){
            adj[it[0]].push_back({it[1], it[2]});
            adj[it[1]].push_back({it[0], it[2]});
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        vector<int> ways(n, 0);
        vector<int> time(n, 1e9);
        int mod = 1e9+7;
        time[0] = 0;
        ways[0] = 1;
        pq.push({0, 0});
        while(!pq.empty()){
            int node = pq.top().second;
            int tym = pq.top().first;
            pq.pop();
            
            for(auto it : adj[node]){
                int adjnode = it.first;
                int adjtime = it.second;
                if(adjtime == 1e9)return 1;
                if(tym + adjtime < time[adjnode]){
                    time[adjnode] = tym + adjtime;
                    ways[adjnode] = ways[node];
                    pq.push({tym + adjtime, adjnode});
                }else if(tym + adjtime == time[adjnode]){
                    ways[adjnode] = (ways[adjnode] + ways[node])%mod;
                }
            }
        }
        return (ways[n - 1])%mod;
    }
};