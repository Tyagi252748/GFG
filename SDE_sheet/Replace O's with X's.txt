class Solution{
public:
void dfs(int row,int col,vector<vector<int>> &vis,vector<vector<char>> &mat,int delr[],int delc[])
{
    vis[row][col] = 1;
    int n = mat.size();
    int m = mat[0].size();
    for(int i = 0; i < 4; i++){
        int nrow = row+delr[i];
        int ncol = col+delc[i];
        if(nrow >=0 && nrow < n && ncol >=0 && ncol < m && vis[nrow][ncol] == 0 && mat[nrow][ncol] == 'O' ){
            dfs(nrow,ncol,vis,mat,delr,delc);
        }
    }
}
    vector<vector<char>> fill(int n, int m, vector<vector<char>> mat)
    {
        vector<vector<int>>vis(n,vector<int>(m,0));
        int delr[] = {-1,0,1,0};
        int delc[] = {0,1,0,-1};
        for(int i = 0; i < m; i++){
            if(vis[0][i] == 0 && mat[0][i] == 'O'){
                dfs(0,i,vis,mat,delr,delc);
            }
            if(vis[n-1][i] == 0 && mat[n-1][i] == 'O'){
                dfs(n-1,i,vis,mat,delr,delc);
            }
        }
        for(int j = 0; j < n; j++){
            if(vis[j][0] == 0 && mat[j][0] == 'O'){
                dfs(j,0,vis,mat,delr,delc);
            }
             if(vis[j][m-1] == 0 && mat[j][m-1] == 'O'){
                dfs(j,m-1,vis,mat,delr,delc);
            }
        }
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(vis[i][j] == 0 && mat[i][j] == 'O'){
                    mat[i][j] = 'X';
                }
            }
        }
        return mat;
    }
};