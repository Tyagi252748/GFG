class Solution{
  private:
    int timer = 1;
    void dfs(int node, int parent, vector<int> &vis, int tin[], int low[],
             vector<int> &mark, vector<int>adj[]) {
        vis[node] = 1;
        tin[node] = low[node] = timer;
        timer++;
        int child = 0;
        for (auto it : adj[node]) {
            if (it == parent) continue;
            if (!vis[it]) {
                dfs(it, node, vis, tin, low, mark, adj);
                low[node] = min(low[node], low[it]);
                if (low[it] >= tin[node] && parent != -1) {
                    mark[node] = 1;
                }
                child++;
            }
            else {
                low[node] = min(low[node], tin[it]);
            }
        }
        if (child > 1 && parent == -1) {
            mark[node] = 1;
        }
    }
    public:
    int doctorStrange(int N, int M, vector<vector<int>> & graph)
    {
        vector<int> adj[N + 1];
        for(int i = 0; i < M; i++){
            int u = graph[i][0];
            int v = graph[i][1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        vector<int> vis(N + 1, 0);
        int tin[N];
        int low[N];
        vector<int> mark(N, 0);
        for (int i = 1; i <= N; i++) {
            if (!vis[i]) {
                dfs(i, -1, vis, tin, low, mark, adj);
            }
        }
        vector<int> ans;
        for (int i = 0; i < N; i++) {
            if (mark[i] == 1) {
                ans.push_back(i);
            }
        }
        if (ans.size() == 0) return 0;
        return ans.size();
    }
};