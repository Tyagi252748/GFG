class Solution{

	public:
	int solve(int coins[], int x,int n,vector<int>&dp){
	    if(x==0){
	        return 0;
	    }
	    if(x<0){
	        return INT_MAX;
	    }
	    if(dp[x]!=-1){
	        return dp[x];
	    }
	    int mini = INT_MAX;
	    for(int i = 0; i < n;i++){
	        int ans = solve(coins,x-coins[i], n,dp);
	        if(ans != INT_MAX){
	            mini = min(mini, 1 + ans);
	        }
	    }
	    dp[x] = mini;
	    return dp[x];
	}
	int minCoins(int coins[], int M, int V) 
	{ 
	    vector<int>dp(V+1,-1);
	    int ans = solve(coins,V,M,dp);
	    if(ans == INT_MAX){
	        return -1;
	    }
	    return ans;
	} 
};


                                            	OR

class Solution{

	public:
	int solve(int idx, int target, int coins[], vector<vector<int>> &dp){
        if(idx == 0){
            if(target % coins[0] == 0)return target/coins[0];
            else return 1e9;
        }
        if(dp[idx][target] != -1)return dp[idx][target];
        int notTake = 0 + solve(idx - 1, target, coins, dp);
        int take = INT_MAX;
        if(coins[idx] <= target)take = 1 + solve(idx, target - coins[idx], coins, dp);
        
        return dp[idx][target] = min(take, notTake);
	}
	int minCoins(int coins[], int M, int V) 
	{ 
	    vector<vector<int>>dp(M,vector<int>(V + 1, -1));
	    int ans = solve(M - 1, V, coins, dp);
	    if(ans >= 1e9){
	        return -1;
	    }
	    return ans;
	} 
};