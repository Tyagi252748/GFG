class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    long long int merge(long long int s, long long int e, long long int mid, long long arr[], long long temp[])
    {
        long long int inv_count = 0;
        long long int i , j, k;
        i = s;
        j = mid;
        k = s;

        while((i <= mid - 1) && (j <= e)){
            if(arr[i] <= arr[j]){
                temp[k++] = arr[i++];
            }else{
                temp[k++] = arr[j++];
                inv_count += mid - i;
            }
        }
        while(i <= mid - 1){
            temp[k++] = arr[i++];
        }
        while(j <= e){
            temp[k++] = arr[j++];
        }
        for(int i = s; i <= e; i++){
            arr[i] = temp[i];
        }
        
        return inv_count;
        
    }
    long long int mergesort(long long int s, long long int e, long long  arr[], long long temp[]){
        long long int inversion = 0;
        
        if(s < e){
            long long int mid = s + (e - s)/2;
            inversion += mergesort(s, mid, arr, temp);
            inversion += mergesort(mid + 1, e, arr, temp);
            
            inversion += merge(s, e, mid + 1, arr, temp);
        }
        
        return inversion;
    }
    long long int inversionCount(long long arr[], long long N)
    {
        long long  temp[N];
        return mergesort(0, N - 1, arr, temp);
    }

};