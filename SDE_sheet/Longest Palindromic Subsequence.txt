class Solution{
  public:
    int solve(int i, int j, string s1, string s2, vector<vector<int>> &dp){
        if(i == s1.length() || j == s2.length())return 0;
        if(dp[i][j] != -1)return dp[i][j];
        
        if(s1[i] == s2[j]){
            return dp[i][j] = 1 + solve(i + 1, j + 1, s1, s2, dp);
        }
        
        return dp[i][j] = max(solve(i + 1, j, s1, s2, dp), solve(i, j + 1, s1, s2, dp));
    }
    int longestPalinSubseq(string A) {
        int n = A.size();
        string B = A;
        reverse(B.begin(), B.end());
        vector<vector<int>> dp(n, vector<int>(n, -1));
        return solve(0, 0, A, B, dp);
    }
};


							OR WITH TABULATION



class Solution{
  public:
    int lcs(string &A, string &B){
        int n = A.size();
        int m = B.size();
        vector<vector<int>>dp(n+1, vector<int>(m + 1, 0));
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= m; j++){
                if(A[i - 1] == B[j - 1])dp[i][j] = 1 + dp[i - 1][j - 1];
                else dp[i][j] = max( dp[i - 1][j], dp[i][j - 1]);
            }
        }
        return dp[n][m];
    }
    int longestPalinSubseq(string A) {
        string B = A;
        reverse(B.begin(), B.end());
        return lcs(A, B);
    }
};