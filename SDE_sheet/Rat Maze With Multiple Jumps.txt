class Solution {
public:
    bool help(int r, int c, vector<vector<int>>&matrix, vector<vector<int>>&sol){
        int n = matrix.size();
        if(r == n - 1 && c == n - 1){
            sol[r][c] = 1;
            return 1;
        }
        if(r >= 0 && r < n && c >= 0 && c < n){
            sol[r][c] = 1;
            for(int i = 1; i <= matrix[r][c] && i < n; i++){
                if(help(r, c + i, matrix, sol))return 1;
                
                
                if(help(r + i, c, matrix, sol))return 1;
            }
            sol[r][c] = 0;
            return 0;
        }
        return 0;
    }
	vector<vector<int>> ShortestDistance(vector<vector<int>>&matrix){
	    int n = matrix.size();
	    vector<vector<int>>sol(n, vector<int>(n, 0));
	    help(0, 0, matrix, sol);
	    vector<vector<int>>ans;
	    ans.push_back({-1});
	    return sol[n - 1][n - 1] == 0 ? ans : sol;
	}

};