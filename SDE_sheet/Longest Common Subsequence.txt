class Solution
{
    public:
    
    //Function to find the length of longest common subsequence in two strings.
    int solve(int i, int j, string s1, string s2, vector<vector<int>> &dp){
        if(i == s1.length() || j == s2.length())return 0;
        if(dp[i][j] != -1)return dp[i][j];
        
        if(s1[i] == s2[j]){
            return dp[i][j] = 1 + solve(i + 1, j + 1, s1, s2, dp);
        }
        
        return dp[i][j] = max(solve(i + 1, j, s1, s2, dp), solve(i, j + 1, s1, s2, dp));
    }
    int lcs(int x, int y, string s1, string s2)
    {
        vector<vector<int>> dp(x, vector<int>(y, -1));
        return solve(0, 0, s1, s2, dp);
    }
};

                                            
                                                 OR WITH TABULATION

class Solution
{
    public:
    //Function to find the length of longest common subsequence in two strings.
    int lcs(int x, int y, string s1, string s2)
    {
        int n = s1.size();
        int m = s2.size();
        vector<vector<int>>dp(n+1, vector<int>(m + 1, 0));
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= m; j++){
                if(s1[i - 1] == s2[j - 1])dp[i][j] = 1 + dp[i - 1][j - 1];
                else dp[i][j] = max( dp[i - 1][j], dp[i][j - 1]);
            }
        }
        return dp[n][m];
    }
};