class Solution {
  public:
    void toposort(int node, vector<pair<int, int>> adj[], int vis[], stack<int> &st){
        vis[node] = 1;
        for(auto it : adj[node]){
            if(!vis[it.first]){
                toposort(it.first, adj, vis, st);
            }
        }
        st.push(node);
    }
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        vector<pair<int, int>> adj[N];
        for(auto it : edges){
            adj[it[0]].push_back({it[1], it[2]});
        }
        int vis[N] = {0};
        stack<int> st;
        for(int i = 0; i < N; i++){
            if(!vis[i]){
                toposort(i, adj, vis, st);
            }
        }
        vector<int> dist(N, 1e9);
        dist[0] = 0;
        while(!st.empty()){
            int node = st.top();
            st.pop();
            for(auto it : adj[node]){
                int adjnode = it.first;
                int adjwt = it.second;
                if(dist[node] + adjwt < dist[adjnode]){
                    dist[adjnode] = dist[node] + adjwt;
                }
            }
        }
        for(auto it : dist){
            if(it == 1e9){
                it = -1;
            }
        }
        return dist;
    }
};