class Solution {
public:
    int findMidSum(int ar1[], int ar2[], int n) {
        int gap = n;
        int bound = 2*n;
        int i = 0;
        int j = gap;
        while(gap > 0){
            int i = 0;
            int j = gap;
            while(j < bound){
                if(j < n && ar1[i] > ar1[j]){
                    swap(ar1[i], ar1[j]);
                }else if(i < n && j >= n && ar1[i] > ar2[j - n]){
                    swap(ar1[i], ar2[j - n]);
                }else if(i >= n && j >= n && ar2[i - n] > ar2[j - n]){
                    swap(ar2[i -n], ar2[j - n]);
                }
                i++;
                j++;
            }
            if(gap == 1){
                gap = 0;
            }else{
                gap = ceil((float)gap/2);
            }
        }
        return ar1[n - 1] + ar2[0]; 
    }
};


                             OR



class Solution {
public:
    int findMidSum(int array1[], int array2[], int n) {
        
        int low = 0;
        int high = n;
        
        while(low <= high){
            int cut1 = (low + high) >> 1;
            int cut2 = (n + n + 1)/2 - cut1;
            
            int left1 = cut1 == 0 ? INT_MIN : array1[cut1 - 1];
            int left2 = cut2 == 0 ? INT_MIN : array2[cut2 - 1];
            
            int right1 = cut1 == n ? INT_MAX : array1[cut1];
            int right2 = cut2 == n ? INT_MAX : array2[cut2];
            
            if(left1 <= right2 && left2 <= right1){
                    return max(left1, left2) + min(right1 , right2);
            }
            else if(left1 > right2){
                high = cut1 - 1;
            }
            else{
                low = cut1 + 1;
            }
        }
    }
};