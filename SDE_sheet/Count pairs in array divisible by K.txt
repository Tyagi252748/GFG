class Solution
{
    public:
    long long countKdivPairs(int A[], int n, int K)
    {
        int rem[K] = {0};
        for(int i = 0; i < n; i++){
            rem[A[i]%K]++;
        }
        long long ans = 0;
        if(rem[0] > 0){
            int x = rem[0];
            ans += (x*(x-1))/2;
        }
        for(int i = 1; i <= K/2; i++){
            if(i == K/2 && K%2 == 0){
                ans += (rem[i]*(rem[i] - 1))/2;
            }else{
                ans += (rem[i]*rem[K - i]);
            }
        }
        return ans;
    }
};


                                         OR

class Solution
{
    public:
    long long countKdivPairs(int A[], int n, int K)
    {
        long long ans = 0;
        unordered_map<int, int>m;
        for(int i = 0; i < n; i++){
            A[i] = A[i]%K;
            m[A[i]]++;
        }
        for(int i = 0; i < n; i++){
            if(A[i] == 0){
                ans += m[0] - 1;
                continue;
            }
            int diff = K - A[i];
            ans += m[diff];
            if(diff == A[i]){
                ans--;
            }
        }
        return ans/2;
    }
};