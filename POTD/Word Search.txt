class Solution {
public:
    bool DFS(int r, int c, int n, int m, int idx, string &word, vector<vector<char>>& board){
        if(idx == word.length() - 1)return true;
        board[r][c] -= 97;
        if(r > 0 && board[r - 1][c] == word[idx + 1] && DFS(r - 1, c, n, m, idx + 1, word, board))return true;
        if(r < n  - 1&& board[r + 1][c] == word[idx + 1] && DFS(r + 1, c, n, m, idx + 1, word, board))return true;
        if(c > 0 && board[r][c - 1] == word[idx + 1] && DFS(r, c - 1, n, m, idx + 1, word, board))return true;
        if(c < m  - 1&& board[r][c + 1] == word[idx + 1] && DFS(r, c + 1, n, m, idx + 1, word, board))return true;
        board[r][c] += 97;
        return false;
    }
    bool isWordExist(vector<vector<char>>& board, string word) {
        int n = board.size();
        int m = board[0].size();
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(board[i][j] == word[0]){
                    if(DFS(i, j, n, m, 0, word, board))return true;
                }
            }
        }
        return false;
    }
};