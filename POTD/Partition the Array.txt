class Solution
{
public:
    int bs(long long arr[], int s, int e, long long sum, long long temp){
        int mid;
        int idx = -1;
        long long first, second, diff = INT_MAX;
        while(s <= e){
            mid = s + (e - s)/2;
            first = arr[mid] - temp;
            second = sum - arr[mid];
            if(abs(first - second) < diff){
                diff = abs(first - second);
                idx = mid;
            }
            if(first < second)s = mid + 1;
            else e = mid - 1;
        }
        return idx;
    }
    long long minDifference(int N, vector<int> &A) {
        long long arr[N];
        arr[0] = A[0];
        for(int i = 1; i < N; i++){
            arr[i]  = A[i] + arr[i - 1];
        }
        long long ans = INT_MAX, w, x, y, z;
        for(int i = 2; i < N - 1; i++){
            int idx = bs(arr, 0, i - 1, arr[i - 1], 0);
            w = arr[idx];
            x = arr[i -1] - w;
            idx = bs(arr, i, N - 1, arr[N - 1], arr[i - 1]);
            y = arr[idx] - arr[i - 1];
            z = arr[N - 1] - arr[idx];
            ans = min(ans, max({w, x, y, z}) - min({w, x, y, z}));
        }
        return ans;
    }
};