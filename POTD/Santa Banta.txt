
class Solution{
public:
    vector<int> prime;
    void precompute(){
        vector<bool> isprime(1000001,true);
        for(int i=2;i<=1000000;i++){
            if(isprime[i]){
                prime.push_back(i);
                for(int j=2*i;j<=1000000;j+=i){
                    isprime[j]=false;
                }
            }
        }
    }
    void DFS(int node, vector<vector<int>> &g, vector<int> &vis, int &cnt){
        if(vis[node])return;
        vis[node] = 1;
        cnt++;
        for(auto it : g[node]){
            if(!vis[it]){
                DFS(it, g, vis, cnt);
            }
        }
    }
    int helpSanta(int n, int m, vector<vector<int>> &g){
        vector<int> vis(n + 1, 0);
        int maxsize = 0;
        for(int i = 1; i <= n; i++){
            if(!vis[i]){
                int cnt = 0;
                DFS(i, g, vis, cnt);
                maxsize = max(maxsize, cnt);
            }
        }
        if(maxsize == 1)return -1;
        return prime[maxsize - 1];
    }
};