class Solution {
  public:
    bool solve(int N, int K, int target, vector<int> &coins, vector<vector<int>> &dp){
        if(target == 0 && K == 0)return true;
        if(dp[K][target] != -1)return dp[K][target];
        bool ans = false;
        for(int i = 0; i < N; i++){
            if(target >= coins[i] && K - 1 >= 0){
                ans = ans | solve(N, K - 1, target - coins[i], coins, dp);
            }
        }
        dp[K][target] = ans ? 1 : 0;
        return ans;
    }
    bool makeChanges(int N, int K, int target, vector<int> &coins) {
        vector<vector<int>>dp(K + 1, vector<int>(target + 1, -1));
        return solve(N, K, target, coins, dp);
    }
};


                                                    OR


class Solution {
  public:
    bool makeChanges(int N, int K, int target, vector<int> &coins) {
        vector<vector<int>>dp(K + 1, vector<int>(target + 1, false));
        dp[0][0] = true;
        for(int i = 0; i < N; i++){
            for(int j = 1; j <= K; j++){
                for(int l = 1; l <= target; l++){
                    if(coins[i] <= l && dp[j][l] == false){
                        dp[j][l] = dp[j - 1][l - coins[i]];
                    }
                }
            }
        }
        return dp[K][target];
    }
};