class Solution {
  public:
    vector<int> getDistinctDifference(int N, vector<int> &A) {
        unordered_map<int, int> vis;
        int left[N] = {0};
        int right[N] = {0};
        vis[A[0]]++;
        int count = 1;
        for(int i = 1; i < N; i++){
            left[i] = count;
            vis[A[i]]++;
            if(vis[A[i]] == 1){
                count++;
            }
        }
        unordered_map<int, int> vis2;
        vis2[A[N - 1]]++;
        count = 1;
        for(int i = N - 2; i >= 0; i--){
            right[i] = count;
            vis2[A[i]]++;
            if(vis2[A[i]] == 1){
                count++;
            }
        }
        vector<int> ans(N, 0);
        for(int i = 0; i < N; i++){
            ans[i] = left[i] - right[i];
        }
        return ans;
    }
};



                                                    OR



class Solution {
  public:
    vector<int> getDistinctDifference(int N, vector<int> &A) {
        vector<int> ans;
        unordered_map<int, int> L, R;
        for(int i = 0 ;i  < N; i++){
            R[A[i]]++;
        }
        for(int i = 0; i < N; i++){
            R[A[i]]--;
            if(R[A[i]] == 0)R.erase(A[i]);
            ans.push_back(L.size() - R.size());
            L[A[i]]++;
        }
        return ans;
    }
};