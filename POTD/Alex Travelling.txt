class Solution {
  public:
    int minimumCost(vector<vector<int>>& flights, int n, int k) {
        vector<pair<int, int>> adj[n + 1];
        for(auto it : flights){
            int u = it[0];
            int v = it[1];
            int w = it[2];
            adj[u].push_back({v, w});
        }
        vector<int> dist(n + 1, 1e9);
        queue<pair<int, int>>q;
        dist[k] = 0;
        q.push({k, 0});
        while(!q.empty()){
            int node = q.front().first;
            int dis = q.front().second;
            q.pop();
            for(auto it : adj[node]){
                int adjnode = it.first;
                int adjwt = it.second;
                if(dis + adjwt < dist[adjnode]){
                    dist[adjnode] = dis + adjwt;
                    q.push( {adjnode, dis + adjwt} );
                }
            }
        }
        int ans = INT_MIN;
        for(int i = 1; i <= n; i++){
            if(dist[i] == 1e9)return -1;
            ans = max(ans, dist[i]);
        }
        return ans;
    }
};