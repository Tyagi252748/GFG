class Solution
{
    public:
    int countSubstring(string S)
    {
        int ans = 0;
        int n = S.length();
        for(int i = 0; i < n; i++){
            int count = 0;
            for(int j = i; j < n; j++){
                if(S[j] >= 'a' && S[j] <= 'z'){
                    count++;
                }else{
                    count--;
                }
                if(count == 0)ans += 1;
            }
        }
        return ans;
    }
};


                                  OR WITH BETTER TIME COMPLEXITY O(N)


class Solution
{
    public:
    int countSubstring(string S)
    {
        int n = S.size();
        int ans = 0;
        int sum = 0;
        unordered_map<int, int> mp;
        for(int i = 0; i < n; i++){
            if(S[i] >= 'a' && S[i] <= 'z'){
                sum += -1;
            }else{
                sum += 1;
            }
            if(sum == 0)ans++;
            
            if(mp.find(sum) != mp.end()){
                ans += mp[sum];
            }
            mp[sum]++;
        }
        
        return ans;
    }
};