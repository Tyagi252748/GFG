
class Solution{
public:

    Node *searchBST(Node *root,int target){
       // cout<<"hello1"<<endl;
        if(root == NULL){
            return NULL;
            
        }
        if(target == root->data){
            return root;
        }
        if(target < root->data){
             searchBST(root->left, target);
        }
         else{
          searchBST(root->right, target);
        }
    }
    void traversal(Node *root, int level,vector<long long int> &v){
        if(root == NULL){
            return;
        }
        if(level == 0){
            v.push_back(root->data);
           // ans += root->data;
        }
        traversal(root->left, level-1,v);
        traversal(root->right, level+1,v);
        
    }
    long long int verticallyDownBST(Node *root,int target){
        Node *tar = searchBST(root, target);
        //cout<<tar->data<<" ";
       vector<long long int> v;
        long long int ans = 0;
        if(tar == NULL){
            return -1;
        }
        else if(tar->left == NULL && tar->right == NULL){
            return 0;
        }
        else{
            traversal(tar,0,v);
            for(auto i:v){
                //cout<<i<<" ";
                ans += i;
            }
         // cout<<ans<<endl;
            return ans - target;
        }
        //return 0;
        
    }
};