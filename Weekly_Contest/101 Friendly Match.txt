class Solution {
  public:
  
  pair<long long, long long>fun(vector<int>&odd, vector<int>&even, int temp) {
        int st1 = 0, st2 = 0, par1 = 0, par2 = 0;
        long long alice = 0, bob = 0;
        
        if (temp == 0) {
            if (even.size() <= 1) return make_pair(-1, -1);
            alice = even[0];
            bob = even[1];
            st1 = 0;
            st2 = 2;
            par1 = 1;
            par2 = 1;
        } else if (temp == 1) {
            if (odd.size() == 0 || even.size() == 0) return make_pair(-1, -1);
            alice = even[0];
            bob = odd[0];
            st1 = 1;
            st2 = 1;
            par1 = 1;
        } else if (temp == 2) {
            if (odd.size() == 0 || even.size() == 0) return make_pair(-1, -1);
            alice = odd[0];
            bob = even[0];
            st1 = 1;
            st2 = 1;
            par2 = 1;
        } else {
            if (odd.size() <= 1) return make_pair(-1, -1);
            alice = odd[0];
            bob = odd[1];
            st1 = 2;
            st2 = 0;
        }
        while (true) {
            int q = 0;
            //alice
            if (par1 == 0) {
                if (st2 < even.size()) {
                    alice += even[st2++];
                    q++;
                    par1 = 1;
                }
            } else {
                if (st1 < odd.size()) {
                    alice += odd[st1++];
                    q++;
                    par1 = 0;
                }
            }
            //bob
            if (par2 == 0) {
                if (st2 < even.size()) {
                    bob += even[st2++];
                    q++;
                    par2 = 1;
                }
            } else {
                if (st1 < odd.size()) {
                    bob += odd[st1++];
                    q++;
                    par2 = 0;
                }
            }
            if (q == 0) break;
         }
         return make_pair(alice, bob);
    }
    long long friendlyMatch(int N, vector<int> &A) {
        // code here
        vector<int>odd, even;
        for(auto it : A) {
            if(it%2 == 0) even.push_back(it);
            else odd.push_back(it);
        }
        sort(odd.begin(), odd.end(), greater<int>());
        sort(even.begin(), even.end(), greater<int>());
        pair<long long, long long>p1 = fun(odd, even, 0);
        pair<long long, long long>p2 = fun(odd, even, 1);
        
        pair<long long, long long>p3 = fun(odd, even, 2);
        pair<long long, long long>p4 = fun(odd, even, 3);
        
        long long alice = 0;
        if(p1.second == p2.second) {
            alice = max(p1.first, p2.first);
        }
        else {
            if(p1.second > p2.second) {
                alice = p1.first;
            }
            else {
                alice = p2.first;
            }
        }
        if(p3.second == p4.second) {
            alice = max(alice, max(p3.first, p4.first));
        }
        else {
            if(p3.second > p4.second) {
                alice = max(alice, p3.first);
            }
            else {
                alice = max(alice, p4.first);
            }   
            
        }
        return alice;
    }
};