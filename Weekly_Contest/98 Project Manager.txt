class Solution {
    public:
     int minTime(int n, int m, int duration[], vector<vector<int>>& dependency){
        vector<vector<int>>adj(n);
        int indegree[n] = {0};
        for(auto it : dependency){
            adj[it[0]].push_back(it[1]);
            indegree[it[1]]++;
        }
        queue<int> q;
        for(int i = 0; i < n; i++){
            if(indegree[i] == 0)q.push(i);
        }
        vector<int> dp(n, 0);
        int cnt = 0;
        while(!q.empty()){
            int node = q.front();
            q.pop();
            cnt++;
            for(auto it : adj[node]){
                indegree[it]--;
                if(indegree[it] == 0)q.push(it);
                
                dp[it] = max(dp[it], dp[node] + duration[node]);
            }
        }
        int mx = -1;
        if(cnt == n){
            for(int i = 0; i < n; i++){
                mx = max(mx, dp[i] + duration[i]);
            }
        }
        return mx;
    }
};